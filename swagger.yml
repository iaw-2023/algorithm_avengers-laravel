openapi: 3.0.3
info:
  title: API Manos Argentinas - Tienda Online
  description: |-
    API oficial de la tienda online de Manos Argentinas de Algorith Avengers
    
    Nuestra ropa no te cambia, te muestra tal cual sos
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  
  contact:
    email: algorithm.avengers.iaw@gmail.com
  license:
    name: MIT license
    url: https://opensource.org/license/mit/
  version: "1"

servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: productos
    description: Accede a los productos
  - name: categorias
    description: Accede a las categorías de los productos
  - name: clientes
    description: Operaciones relacionadas a las cuentas de los clientes
  - name: compras
    description: Operaciones relacionadas a las compras
paths:
  /productos:
    get:
      tags:
        - productos
      summary: Muestra todos los productos
      description: Muestra la información de todos los productos junto con la información de su categoría asociada
      responses:
        '200':
          description: Operación realizada con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producto'
  /productos/{id}:
    get:
      tags:
        - productos
      summary: Muestra la información de un producto
      description: Dado un id válido de un producto, muestra la información de este producto junto con la información de su categoría asociada
      parameters:
        - name: id
          in: path
          description: ID del producto buscado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operación realizada con éxito
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Producto'
  

  /categorias:
    get:
      tags:
        - categorias
      summary: Devuelve todas las categorías
      description: Devuelve todas las categorías posibles para los productos
      responses:
        '200':
          description: Operación realizada con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categoria'
  
  /categorias/{id}:
    get:
      tags:
        - categorias
      summary: Devuelve la categoría con el id especificado
      description: Dado un id, devuelve la categoría correspondiente a ese id
      parameters:
        - name: id
          in: path
          description: ID de la categoría buscada
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operación realizada con éxito
          content: 
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Categoria'

  /clientes:
    get:
      tags:
        - clientes
      summary: Devuelve todos los clientes
      description: Devuelve todos los clientes registrados en el sistema
      responses:
        '200':
          description: Operación realizada con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente'
    post:
      tags:
        - clientes
      summary: Almacena un nuevo cliente en el sistema
      description: Almacena un nuevo cliente en el sistema y lo retorna
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientePut'
          application/xml:
            schema:
              $ref: '#/components/schemas/ClientePut'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientePut'
      responses:
        '200':
          description: Operación realizada con éxito
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Cliente'

  /clientes/{id}:
    get:
      tags:
        - clientes
      summary: Devuelve el cliente con el id especificado
      description: Dado un id, devuelve el cliente correspondiente a ese id
      parameters:
        - name: id
          in: path
          description: ID del cliente buscado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operación realizada con éxito
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Cliente'
    put:
      tags:
        - clientes
      summary: Modifica los datos del cliente con el id especificado
      description: Dado un id, modifica los datos del cliente correspondiente a ese id y lo retorna
      parameters:
        - name: id
          in: path
          description: ID del cliente a modificar
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientePut'
          application/xml:
            schema:
              $ref: '#/components/schemas/ClientePut'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientePut'
      responses:
        '200':
          description: Operación realizada con éxito
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Cliente'
    delete:
      tags:
        - clientes
      summary: Elimina el cliente con el id especificado
      description: Dado un id, lo elimina
      parameters:
        - name: id
          in: path
          description: ID del cliente a eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operación realizada con éxito

  /compras:
    get:
      tags:
        - compras
      summary: Devuelve todos las compras
      description: Devuelve todas las compras efectuadas hasta el momento
      responses:
        '200':
          description: Operación realizada con éxito
          content: 
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/Compra'

  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found




















components:
  schemas:
    Producto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nombre:
          type: string
          example: "Buzo Rebelde"
        descripcion:
          type: string
          example: "Buzo estampado en la espalda"
        categoria:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/Categoria/properties/id'
            nombre: 
              $ref: '#/components/schemas/Categoria/properties/nombre'
      xml:
        name: productos

    Categoria:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        nombre:
          type: string
          example: "Masculinidades"
        descripcion:
          type: string
          example: "Ropa diseñada para masculinidades"
    xml:
        name: categorias

    Cliente:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        email:
          type: string
          format: email
          example: "juan_gonzález@example.com"
        nombre:
          type: string
          example: "Juan González"
        telefono:
          type: string
          example: "+54 1 111 111 1111"
        domicilio:
          type: string
          example: "San Martín 1810"
      xml:
        name: clientes

    ClientePut:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        email:
          type: string
          format: email
          example: "juan_gonzález@example.com"
        contrasena:
          type: string
          example: "2af329f4923f1ccde3cbaeb949e3fe32"
        nombre:
          type: string
          example: "Juan González"
        telefono:
          type: string
          example: "+54 1 111 111 1111"
        domicilio:
          type: string
          example: "San Martín 1810"
      xml:
        name: clientes

    Compra:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        precio:
          type: number
          multipleOf: 0.01
          example: 12345.67
        fecha:
          type: string
          format: date
        direccion_entrega:
          type: string
          example: Belgrano 1812
        detalle:
          type: array
          items:
            $ref: '#/components/schemas/DetalleOrden'
        cliente:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/Cliente/properties/id'
            email:
              $ref: '#/components/schemas/Cliente/properties/email'
            nombre:
              $ref: '#/components/schemas/Cliente/properties/nombre'

    DetalleOrden:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 4
        id_producto:
          $ref: '#/components/schemas/Producto/properties/id'
        cantidad:
          type: integer
          format: int64
          example: 2
        nombre_producto:
          $ref: '#/components/schemas/Producto/properties/nombre'
      xml:
        name: detalle_orden


    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header